// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type TasksStatus string

const (
	TasksStatusTodo TasksStatus = "todo"
	TasksStatusDone TasksStatus = "done"
)

func (e *TasksStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TasksStatus(s)
	case string:
		*e = TasksStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TasksStatus: %T", src)
	}
	return nil
}

type NullTasksStatus struct {
	TasksStatus TasksStatus
	Valid       bool // Valid is true if TasksStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTasksStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TasksStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TasksStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTasksStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TasksStatus), nil
}

type GooseDbVersion struct {
	ID        uint64
	VersionID int64
	IsApplied bool
	Tstamp    sql.NullTime
}

type Task struct {
	ID        uint64
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Status    TasksStatus
}
